{"ast":null,"code":"var _jsxFileName = \"/Users/yesdev/Desktop/test/dosomthing.php/quiz/Quiz-App/src/page/componentquiz.jsx\",\n  _s = $RefreshSig$();\nimport { Axios } from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport QuizSample from \"./quizjs\";\n// import Index from \"../layout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Componentquiz() {\n  _s();\n  const [quizData, setQuizData] = useState([]);\n  const [data, setData] = useState({});\n  const [activeChoice, setActiveChoice] = useState({});\n  // const [timeOut, setTimeOut] = useState(30 * 60);\n  // const [score, setScore] = useState(null);\n\n  // {\n  //   username: \"\",\n  //   email: \"\",\n  //   ans: [\n  //     {\n  //       id: \"\",\n  //       ans: [],\n  //     },\n  //   ],\n  // }\n\n  const [inputValues, setInputValues] = useState([]);\n  useEffect(() => {\n    console.table(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n  const handleChoiceSelect = (questionId, choiceIndex) => {\n    setQuizData(prevQuestions => {\n      return prevQuestions.map(question => {\n        if (question.id === questionId) {\n          return {\n            ...question,\n            activeChoice: choiceIndex\n          };\n        }\n        return question;\n      });\n    });\n    const thisInput = Array.isArray(inputValues) && inputValues.find(obj => obj[\"question_id\"] === questionId);\n    const updatedInputValues = thisInput ? inputValues.map(obj => obj === thisInput ? {\n      ...obj,\n      select: choiceIndex\n    } : obj) : [...inputValues, {\n      id: questionId,\n      select: choiceIndex\n    }];\n    setInputValues(updatedInputValues);\n  };\n  const handleSubmit = () => {\n    const newData = inputValues.map(inputValue => {\n      if (inputValue.hasOwnProperty(\"select\")) {\n        var _inputValue;\n        // Retrieve the values of the 'select' property\n        inputValue[\"question_id\"] = (_inputValue = inputValue) === null || _inputValue === void 0 ? void 0 : _inputValue.id; // Assign the values to the 'ans' property\n        inputValue[\"ans\"] = [inputValue.select]; // Assign the values to the 'ans' property\n        delete inputValue.id; // Remove the 'select' property\n        delete inputValue.select; // Remove the 'select' property\n      } else {\n        const reducedObj = Object.keys(inputValue).reduce((acc, key) => {\n          if (key !== \"question_id\") {\n            acc.ans.push(inputValue[key]);\n          }\n          return acc;\n        }, {\n          question_id: inputValue.question_id,\n          ans: []\n        });\n        inputValue = reducedObj;\n      }\n      return inputValue;\n    });\n    const result = {\n      username: data.username,\n      email: data.email,\n      questions: newData\n    };\n    setData(result);\n    // console.log(data);\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    // setData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleInput = (questionId, e) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const thisInput = Array.isArray(inputValues) && inputValues.find(obj => obj[\"question_id\"] === questionId);\n    const updatedInputValues = thisInput ? inputValues.map(obj => obj === thisInput ? {\n      ...obj,\n      [name]: value\n    } : obj) : [...inputValues, {\n      question_id: questionId,\n      [name]: value\n    }];\n    setInputValues(updatedInputValues);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col gap-[24px] items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"username\",\n      name: \"username\",\n      value: data.username,\n      onChange: e => handleChange(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      className: \"email\",\n      name: \"email\",\n      value: data.email,\n      onChange: e => handleChange(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), quizData.map((item, ind) => {\n      var _inputValues$find, _inputValues$find2, _inputValues$find3;\n      const question_quiz = item.sub_question;\n      const inputObj = {\n        \"%i%\": /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"input\",\n          value: Array.isArray(inputValues) && (_inputValues$find = inputValues.find(obj => obj[\"question_id\"] === item.id)) !== null && _inputValues$find !== void 0 && _inputValues$find.input ? inputValues.find(obj => obj[\"question_id\"] === item.id).input : \"\",\n          onChange: e => handleInput(item.id, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this),\n        \"%i1%\": /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"input1\",\n          value: Array.isArray(inputValues) && (_inputValues$find2 = inputValues.find(obj => obj[\"question_id\"] === item.id)) !== null && _inputValues$find2 !== void 0 && _inputValues$find2.input1 ? inputValues.find(obj => obj[\"question_id\"] === item.id).input1 : \"\",\n          onChange: e => handleInput(item.id, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this),\n        \"%i2%\": /*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            margin: \"0px 16px 0px\"\n          },\n          type: \"text\",\n          name: \"input2\",\n          value: Array.isArray(inputValues) && (_inputValues$find3 = inputValues.find(obj => obj[\"question_id\"] === item.id)) !== null && _inputValues$find3 !== void 0 && _inputValues$find3.input2 ? inputValues.find(obj => obj[\"question_id\"] === item.id).input2 : \"\",\n          onChange: e => handleInput(item.id, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this),\n        function: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \" text-purple-400 text-xl\",\n          children: \"function \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this),\n        return: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-purple-400 text-xl\",\n          children: \"return \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 19\n        }, this),\n        const: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-purple-500 text-xl\",\n          children: \"const \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 18\n        }, this)\n      };\n      const swap_text = () => {\n        const text_array = question_quiz.split(\" \");\n        const a = text_array.map(item => {\n          if (item in inputObj) item = inputObj[item];else item += \" \";\n          return item;\n        });\n        return a;\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mb-[24px] w-[50%] \",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col gap-[20px] w-full  \",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [ind + 1, \". \", item.question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), item.type_question === \"key\" ? /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: swap_text()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-[16px] w-[100%] \",\n            children: item.choices.map((choiz, indexchoice) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `flex w-[25%] ${item.activeChoice === choiz ? \"bg-[#bbadad67] text-black \" : \"bg-blue-900 text-white\"}\n                            p-[24px]  break-all\n                            justify-center rounded-[16px] box-border text-2 `,\n                onClick: () => {\n                  handleChoiceSelect(item.id, choiz.choice);\n                },\n                children: choiz\n              }, choiz.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)\n      }, item.question_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"bttton-submit-container flex justify-center w-[50%] bg-cyan-300\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-submit p-4 text-white bg-[#213555] m-10 rounded-xl\",\n        onClick: handleSubmit,\n        children: \"\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E33\\u0E15\\u0E2D\\u0E1A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n// console.log(\"swap_text -->\", swap_text());\n// console.log(\"question \", question_quiz);\n// data.question\n//           var parts = \"I am a cow; cows say moo. MOOOOO.\".split(/(\\bmoo+\\b)/gi);\n// for (var i = 1; i < parts.length; i += 2) {\n//   parts[i] = <span className=\"match\" key={i}>{parts[i]}</span>;\n// }\n// return <div>{parts}</div>;\n// const keyEditParts = item.keyEdit.split(/%i%|%i1%|%i2%/gi);\n\n// const newKeyEdit = item.keyEdit\n//   .toString()\n//   .replace(/%i%|%i1%|%i2%/gi, (match) => {\n//     return inputObj[match];\n//   });\n\n// const newKeyEdit = keyEditParts.map((part, index) => {\n//   switch (index) {\n//     case keyEditParts.length - 1:\n//       return part;\n//     case 0:\n//     case 1:\n//     case 2:\n//       return (\n//         <input\n//           key={index}\n//           type=\"text\"\n//           name={part}\n//           value={inputValues[ind][part]}\n//           onChange={(e) => handleInput(item.id, e)}\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// });\n\n// import React, { useState } from 'react';\n\n// function Quiz() {\n//   const questions = [\n//     { question: 'Question 1', id: 1, correctInput1: 'Correct 1', correctInput2: 'Correct 2' },\n//     { question: 'Question 2', id: 2, correctInput1: 'Answer 1', correctInput2: 'Answer 2' },\n//     // Add more questions as needed\n//   ];\n\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const currentQuestion = questions[currentQuestionIndex];\n\n//   const [input1, setInput1] = useState('');\n//   const [input2, setInput2] = useState('');\n//   const [isAnswerCorrect, setIsAnswerCorrect] = useState(false);\n\n//   const handleInput1Change = (e) => {\n//     setInput1(e.target.value);\n//   };\n\n//   const handleInput2Change = (e) => {\n//     setInput2(e.target.value);\n//   };\n\n//   const handleNextQuestion = () => {\n//     if (isAnswerCorrect) {\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\n//       setInput1('');\n//       setInput2('');\n//       setIsAnswerCorrect(false);\n//     }\n//   };\n\n//   const checkAnswer = () => {\n//     if (\n//       input1 === currentQuestion.correctInput1 &&\n//       input2 === currentQuestion.correctInput2\n//     ) {\n//       setIsAnswerCorrect(true);\n//     } else {\n//       setIsAnswerCorrect(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>{currentQuestion.question}</h2>\n//       <input type=\"text\" value={input1} onChange={handleInput1Change} />\n//       <input type=\"text\" value={input2} onChange={handleInput2Change} />\n//       <button onClick={checkAnswer}>Check Answer</button>\n//       {isAnswerCorrect && <p>Correct!</p>}\n//       {!isAnswerCorrect && (\n//         <p>Incorrect. Please try again or move to the next question.</p>\n//       )}\n//       <button onClick={handleNextQuestion}>Next Question</button>\n//     </div>\n//   );\n// }\n\n// import React, { useState } from 'react';\n\n// function Quiz() {\n//   const questions = [\n//     { question: 'Question 1', id: 1, correctInput1: 'Correct 1', correctInput2: 'Correct 2' },\n//     { question: 'Question 2', id: 2, correctInput1: 'Answer 1', correctInput2: 'Answer 2' },\n//     // Add more questions as needed\n//   ];\n\n//   const [inputs, setInputs] = useState(\n//     questions.map((question) => ({\n//       id: question.id,\n//       input1: '',\n//       input2: '',\n//       isAnswerCorrect: false,\n//     }))\n//   );\n\n//   const handleInputChange = (e, questionId) => {\n//     const { name, value } = e.target;\n//     setInputs((prevInputs) =>\n//       prevInputs.map((input) =>\n//         input.id === questionId ? { ...input, [name]: value } : input\n//       )\n//     );\n//   };\n\n//   const checkAnswer = (questionId) => {\n//     const question = questions.find((q) => q.id === questionId);\n//     const input = inputs.find((input) => input.id === questionId);\n\n//     if (\n//       input.input1 === question.correctInput1 &&\n//       input.input2 === question.correctInput2\n//     ) {\n//       setInputs((prevInputs) =>\n//         prevInputs.map((input) =>\n//           input.id === questionId ? { ...input, isAnswerCorrect: true } : input\n//         )\n//       );\n//     } else {\n//       setInputs((prevInputs) =>\n//         prevInputs.map((input) =>\n//           input.id === questionId ? { ...input, isAnswerCorrect: false } : input\n//         )\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {questions.map((question) => {\n//         const input = inputs.find((input) => input.id === question.id);\n\n//         return (\n//           <div key={question.id} className='flex flex-col gap-4'>\n//             <h2>{question.question}</h2>\n//             <input\n//               className='bg-black text-white'\n//               type=\"text\"\n//               name=\"input1\"\n//               value={input.input1}\n//               onChange={(e) => handleInputChange(e, question.id)}\n//             />\n//             <input\n//             className='bg-black text-white'\n//               type=\"text\"\n//               name=\"input2\"\n//               value={input.input2}\n//               onChange={(e) => handleInputChange(e, question.id)}\n//             />\n//             <button onClick={() => checkAnswer(question.id)}>Check Answer</button>\n//             {input.isAnswerCorrect && <p>Correct!</p>}\n//             {!input.isAnswerCorrect && (\n//               <p>Incorrect. Please try again.</p>\n//             )}\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// }\n\n// export default Quiz;\n\n// import React, { useState } from \"react\";\n\n// const Quiz = () => {\n//   // const [quizData, setQuizData] = useState(QuizSample);\n//   const [answers, setAnswers] = useState([]);\n\n//   const handleInputChange = (e, questionId) => {\n//     const { name, value } = e.target;\n//     setAnswers((prevAnswers) => {\n//       const updatedAnswers = [...prevAnswers];\n//       const answerIndex = updatedAnswers.findIndex(\n//         (answer) => answer.questionId === questionId\n//       );\n//       if (answerIndex !== -1) {\n//         updatedAnswers[answerIndex][name] = value;\n//       } else {\n//         updatedAnswers.push({ questionId, [name]: value });\n//       }\n//       return updatedAnswers;\n//     });\n//   };\n\n//   const handleSelectChange = (e, questionId) => {\n//     const { value } = e.target;\n//     setAnswers((prevAnswers) => {\n//       const updatedAnswers = [...prevAnswers];\n//       const answerIndex = updatedAnswers.findIndex(\n//         (answer) => answer.questionId === questionId\n//       );\n//       if (answerIndex !== -1) {\n//         updatedAnswers[answerIndex].selectedChoice = value;\n//       } else {\n//         updatedAnswers.push({ questionId, selectedChoice: value });\n//       }\n//       return updatedAnswers;\n//     });\n//   };\n\n//   const handleSubmit = () => {\n//     console.log(\"Submitted answers:\", answers);\n//     // Add your logic for handling the submitted answers\n//   };\n\n//   const renderQuestion = (question) => {\n//     switch (question.type_Quiz) {\n//       case \"key\":\n//         return (\n//           <div key={question.id}>\n//             <p>{question.title}</p>\n//             <div className=\"flex flex-col\">\n//               {question.keyEdit\n//                 .replace(/%i%/g, question.correctInput)\n//                 .replace(/%i1%/g, question.correctInput1)\n//                 .replace(/%i2%/g, question.correctInput2)}\n//             </div>\n//             <input\n//               type=\"text\"\n//               name=\"input\"\n//               value={getAnswer(question.id, \"input\") || \"\"}\n//               onChange={(e) => handleInputChange(e, question.id)}\n//             />\n//           </div>\n//         );\n//       case \"select\":\n//         return (\n//           <div key={question.id}>\n//             <p>{question.title}</p>\n//             <select\n//               name=\"selectedChoice\"\n//               value={getAnswer(question.id, \"selectedChoice\") || \"\"}\n//               onChange={(e) => handleSelectChange(e, question.id)}\n//             >\n//               <option value=\"\">Select an option</option>\n//               {question.QuizChoice.map((choice, index) => (\n//                 <option key={index} value={index}>\n//                   {choice}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n//         );\n//       default:\n//         return null;\n//     }\n//   };\n\n//   const getAnswer = (questionId, key) => {\n//     const answer = answers.find((answer) => answer.questionId === questionId);\n//     return answer ? answer[key] : null;\n//   };\n\n//   return (\n//     <div>\n//       <h1>Quiz</h1>\n//       {quizData.map((question) => renderQuestion(question))}\n//       <button onClick={handleSubmit}>Submit</button>\n//     </div>\n//   );\n// };\n\n// export default Quiz;\n\n// import React, { useEffect, useState } from \"react\";\n// import QuizSample from \"./quiz\";\n// import Index from \"../layout\";\n\n// export default function Componentquiz() {\n//   const [quizData, setQuizData] = useState(QuizSample);\n//   const [timeOut, setTimeOut] = useState(10 * 60);\n//   const [score, setScore] = useState(null);\n//   const [showResult, setShowResult] = useState(false);\n//   const [inputValues, setInputValues] = useState(\n//     quizData.map((item) => ({\n//       id: item.id,\n//       input_: \"string_0\",\n//       input_1: \"\",\n//       input_2: \"\",\n//       correctAnswer: false,\n//     }))\n//   );\n\n//   useEffect(() => {\n//     const intervalTime = setInterval(() => {\n//       setTimeOut((prevTime) => prevTime - 1);\n//     }, 1000);\n\n//     return () => {\n//       clearInterval(intervalTime);\n//     };\n//   }, []);\n\n//   const min = Math.floor(timeOut / 60);\n//   const seconds = timeOut % 60;\n\n//   const handleChoiceSelect = (questionId, choiceIndex) => {\n//     setQuizData((prevQuestions) => {\n//       return prevQuestions.map((question) => {\n//         if (question.id === questionId) {\n//           return {\n//             ...question,\n//             activeChoice: choiceIndex,\n//           };\n//         }\n//         return question;\n//       });\n//     });\n//   };\n\n//   const handleSubmit = () => {\n//     let newscore = 0;\n//     quizData.forEach((prev) => {\n//       if (\n//         prev.activeChoice === prev.correctchoice &&\n//         prev.type_Quiz === \"select\"\n//       ) {\n//         newscore++;\n//       }\n//     });\n//     setScore(newscore);\n//     setShowResult(!showResult);\n//     console.log(\"log submit\", inputValues[0]?.input_);\n//   };\n\n//   useEffect(() => {\n//     console.log(\"check input --->\", inputValues[0].input_);\n//   }, [inputValues]);\n\n//   return (\n//     <div className=\"flex flex-col gap-[24px] items-center\">\n//       <Index min={min} seconds={seconds}>\n//         {quizData.map((item, ind) => {\n//           const newKeyEdit = item.keyEdit.replace(\n//             /%i%|%i1%|%i2%/gi,\n//             (match) => {\n//               if (match === \"%i%\") {\n//                 return (\n//                   <input\n//                     key={item.id}\n//                     type=\"text\"\n//                     value={inputValues[ind].input_}\n//                     name=\"input_\"\n//                     onChange={(e) => {\n//                       const updateValues = [...inputValues];\n//                       updateValues[ind].input_ = e.target.value;\n//                       setInputValues(updateValues);\n//                     }}\n//                   />\n//                 );\n//               } else if (match === \"%i1%\") {\n//                 return (\n//                   <input\n//                     key={item.id}\n//                     type=\"text\"\n//                     value={inputValues[ind].input_1}\n//                     name=\"input_1\"\n//                     onChange={(e) => {\n//                       const updateValues = [...inputValues];\n//                       updateValues[ind].input_1 = e.target.value;\n//                       setInputValues(updateValues);\n//                     }}\n//                   />\n//                 );\n//               } else if (match === \"%i2%\") {\n//                 return (\n//                   <input\n//                     key={item.id}\n//                     type=\"text\"\n//                     value={inputValues[ind].input_2}\n//                     name=\"input_2\"\n//                     onChange={(e) => {\n//                       const updateValues = [...inputValues];\n//                       updateValues[ind].input_2 = e.target.value;\n//                       setInputValues(updateValues);\n//                     }}\n//                   />\n//                 );\n//               }\n//               return match;\n//             }\n//           );\n\n//           return (\n//             <div key={item.id}>\n//               <h3>{item.question}</h3>\n//               {item.type_Quiz === \"select\" ? (\n//                 item.QuizChoice.map((choice, index) => (\n//                   <div key={index}>\n//                     <label>\n//                       <input\n//                         type=\"radio\"\n//                         checked={item.activeChoice === index}\n//                         onChange={() => handleChoiceSelect(item.id, index)}\n//                       />\n//                       {choice}\n//                     </label>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <div>{newKeyEdit}</div>\n//               )}\n//             </div>\n//           );\n//         })}\n//       </Index>\n//       <button onClick={handleSubmit}>Submit</button>\n//       {showResult && (\n//         <div>\n//           <h2>Your Score: {score}</h2>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n_s(Componentquiz, \"MHnbtgUcqjDp883Dr3QBP7RLFhI=\");\n_c = Componentquiz;\nvar _c;\n$RefreshReg$(_c, \"Componentquiz\");","map":{"version":3,"names":["Axios","React","useEffect","useState","QuizSample","jsxDEV","_jsxDEV","Componentquiz","_s","quizData","setQuizData","data","setData","activeChoice","setActiveChoice","inputValues","setInputValues","console","table","log","handleChoiceSelect","questionId","choiceIndex","prevQuestions","map","question","id","thisInput","Array","isArray","find","obj","updatedInputValues","select","handleSubmit","newData","inputValue","hasOwnProperty","_inputValue","reducedObj","Object","keys","reduce","acc","key","ans","push","question_id","result","username","email","questions","handleChange","e","name","value","target","prev","handleInput","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","item","ind","_inputValues$find","_inputValues$find2","_inputValues$find3","question_quiz","sub_question","inputObj","input","input1","style","margin","input2","function","return","const","swap_text","text_array","split","a","type_question","choices","choiz","indexchoice","onClick","choice","_c","$RefreshReg$"],"sources":["/Users/yesdev/Desktop/test/dosomthing.php/quiz/Quiz-App/src/page/componentquiz.jsx"],"sourcesContent":["import { Axios } from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport QuizSample from \"./quizjs\";\n// import Index from \"../layout\";\n\nexport default function Componentquiz() {\n  const [quizData, setQuizData] = useState([]);\n  const [data, setData] = useState({});\n  const [ activeChoice , setActiveChoice] = useState({})\n  // const [timeOut, setTimeOut] = useState(30 * 60);\n  // const [score, setScore] = useState(null);\n\n\n  // {\n  //   username: \"\",\n  //   email: \"\",\n  //   ans: [\n  //     {\n  //       id: \"\",\n  //       ans: [],\n  //     },\n  //   ],\n  // }\n\n  const [inputValues, setInputValues] = useState([]);\n  useEffect(() => {\n    console.table(inputValues);\n  }, [inputValues]);\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  const handleChoiceSelect = (questionId, choiceIndex) => {\n    setQuizData((prevQuestions) => {\n      return prevQuestions.map((question) => {\n        if (question.id === questionId) {\n          return {\n            ...question,\n            activeChoice: choiceIndex,\n          };\n        }\n        return question;\n      });\n    });\n\n    const thisInput =\n      Array.isArray(inputValues) &&\n      inputValues.find((obj) => obj[\"question_id\"] === questionId);\n\n    const updatedInputValues = thisInput\n      ? inputValues.map((obj) =>\n          obj === thisInput ? { ...obj, select: choiceIndex } : obj\n        )\n      : [...inputValues, { id: questionId, select: choiceIndex }];\n    setInputValues(updatedInputValues);\n  };\n\n  const handleSubmit = () => {\n    const newData = inputValues.map((inputValue) => {\n      if (inputValue.hasOwnProperty(\"select\")) {\n        // Retrieve the values of the 'select' property\n        inputValue[\"question_id\"] = inputValue?.id; // Assign the values to the 'ans' property\n        inputValue[\"ans\"] = [inputValue.select]; // Assign the values to the 'ans' property\n        delete inputValue.id; // Remove the 'select' property\n        delete inputValue.select; // Remove the 'select' property\n      } else {\n        const reducedObj = Object.keys(inputValue).reduce(\n          (acc, key) => {\n            if (key !== \"question_id\") {\n              acc.ans.push(inputValue[key]);\n            }\n            return acc;\n          },\n          { question_id: inputValue.question_id, ans: [] }\n        );\n        inputValue = reducedObj;\n      }\n      return inputValue;\n    });\n\n    const result = {\n      username: data.username,\n      email: data.email,\n      questions: newData,\n    };\n\n    setData(result);\n    // console.log(data);\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setData((prev) => ({ ...prev, [name]: value }));\n    // setData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleInput = (questionId, e) => {\n    const { name, value } = e.target;\n    const thisInput =\n      Array.isArray(inputValues) &&\n      inputValues.find((obj) => obj[\"question_id\"] === questionId);\n\n    const updatedInputValues = thisInput\n      ? inputValues.map((obj) =>\n          obj === thisInput ? { ...obj, [name]: value } : obj\n        )\n      : [...inputValues, { question_id: questionId, [name]: value }];\n    setInputValues(updatedInputValues);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-[24px] items-center\">\n      {/* <Index min={min} seconds={seconds}> */}\n      <input\n        type=\"text\"\n        className=\"username\"\n        name=\"username\"\n        value={data.username}\n        onChange={(e) => handleChange(e)}\n      />\n      <input\n        type=\"email\"\n        className=\"email\"\n        name=\"email\"\n        value={data.email}\n        onChange={(e) => handleChange(e)}\n      />\n      {quizData.map((item, ind) => {\n        const question_quiz = item.sub_question;\n\n        const inputObj = {\n          \"%i%\": (\n            <input\n              type=\"text\"\n              name=\"input\"\n              value={\n                Array.isArray(inputValues) &&\n                inputValues.find((obj) => obj[\"question_id\"] === item.id)?.input\n                  ? inputValues.find((obj) => obj[\"question_id\"] === item.id)\n                      .input\n                  : \"\"\n              }\n              onChange={(e) => handleInput(item.id, e)}\n            />\n          ),\n          \"%i1%\": (\n            <input\n              type=\"text\"\n              name=\"input1\"\n              value={\n                Array.isArray(inputValues) &&\n                inputValues.find((obj) => obj[\"question_id\"] === item.id)\n                  ?.input1\n                  ? inputValues.find((obj) => obj[\"question_id\"] === item.id)\n                      .input1\n                  : \"\"\n              }\n              onChange={(e) => handleInput(item.id, e)}\n            />\n          ),\n          \"%i2%\": (\n            <input\n              style={{ margin: \"0px 16px 0px\" }}\n              type=\"text\"\n              name=\"input2\"\n              value={\n                Array.isArray(inputValues) &&\n                inputValues.find((obj) => obj[\"question_id\"] === item.id)\n                  ?.input2\n                  ? inputValues.find((obj) => obj[\"question_id\"] === item.id)\n                      .input2\n                  : \"\"\n              }\n              onChange={(e) => handleInput(item.id, e)}\n            />\n          ),\n          function: <span className=\" text-purple-400 text-xl\">function </span>,\n          return: <span className=\"text-purple-400 text-xl\">return </span>,\n          const: <span className=\"text-purple-500 text-xl\">const </span>,\n        };\n        const swap_text = () => {\n          const text_array = question_quiz.split(\" \");\n          const a = text_array.map((item) => {\n            if (item in inputObj) item = inputObj[item];\n            else item += \" \";\n            return item;\n          });\n          return a;\n        };\n\n        return (\n          <div className=\"flex mb-[24px] w-[50%] \" key={item.question_id}>\n            <div className=\"flex flex-col gap-[20px] w-full  \">\n              <div>\n                {ind + 1}. {item.question}\n              </div>\n\n              {item.type_question === \"key\" ? (\n                <pre>\n                  <code>{swap_text()}</code>\n                </pre>\n              ) : (\n                <div className=\"flex gap-[16px] w-[100%] \">\n                  {item.choices.map((choiz,indexchoice) => {\n                    return (\n                      <div\n                        key={choiz.id}\n                        className={`flex w-[25%] ${\n                          item.activeChoice === choiz\n                            ? \"bg-[#bbadad67] text-black \"\n                            : \"bg-blue-900 text-white\"\n                        }\n                            p-[24px]  break-all\n                            justify-center rounded-[16px] box-border text-2 `}\n                        onClick={() => {\n                          handleChoiceSelect(item.id, choiz.choice);\n                        }}\n                      >\n                        {choiz}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n      <footer className=\"bttton-submit-container flex justify-center w-[50%] bg-cyan-300\">\n        <button\n          className=\"button-submit p-4 text-white bg-[#213555] m-10 rounded-xl\"\n          onClick={handleSubmit}\n        >\n          ส่งคำตอบ\n        </button>\n      </footer>\n      {/* </Index> */}\n    </div>\n  );\n}\n\n// console.log(\"swap_text -->\", swap_text());\n// console.log(\"question \", question_quiz);\n// data.question\n//           var parts = \"I am a cow; cows say moo. MOOOOO.\".split(/(\\bmoo+\\b)/gi);\n// for (var i = 1; i < parts.length; i += 2) {\n//   parts[i] = <span className=\"match\" key={i}>{parts[i]}</span>;\n// }\n// return <div>{parts}</div>;\n// const keyEditParts = item.keyEdit.split(/%i%|%i1%|%i2%/gi);\n\n// const newKeyEdit = item.keyEdit\n//   .toString()\n//   .replace(/%i%|%i1%|%i2%/gi, (match) => {\n//     return inputObj[match];\n//   });\n\n// const newKeyEdit = keyEditParts.map((part, index) => {\n//   switch (index) {\n//     case keyEditParts.length - 1:\n//       return part;\n//     case 0:\n//     case 1:\n//     case 2:\n//       return (\n//         <input\n//           key={index}\n//           type=\"text\"\n//           name={part}\n//           value={inputValues[ind][part]}\n//           onChange={(e) => handleInput(item.id, e)}\n//         />\n//       );\n//     default:\n//       return null;\n//   }\n// });\n\n// import React, { useState } from 'react';\n\n// function Quiz() {\n//   const questions = [\n//     { question: 'Question 1', id: 1, correctInput1: 'Correct 1', correctInput2: 'Correct 2' },\n//     { question: 'Question 2', id: 2, correctInput1: 'Answer 1', correctInput2: 'Answer 2' },\n//     // Add more questions as needed\n//   ];\n\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const currentQuestion = questions[currentQuestionIndex];\n\n//   const [input1, setInput1] = useState('');\n//   const [input2, setInput2] = useState('');\n//   const [isAnswerCorrect, setIsAnswerCorrect] = useState(false);\n\n//   const handleInput1Change = (e) => {\n//     setInput1(e.target.value);\n//   };\n\n//   const handleInput2Change = (e) => {\n//     setInput2(e.target.value);\n//   };\n\n//   const handleNextQuestion = () => {\n//     if (isAnswerCorrect) {\n//       setCurrentQuestionIndex(currentQuestionIndex + 1);\n//       setInput1('');\n//       setInput2('');\n//       setIsAnswerCorrect(false);\n//     }\n//   };\n\n//   const checkAnswer = () => {\n//     if (\n//       input1 === currentQuestion.correctInput1 &&\n//       input2 === currentQuestion.correctInput2\n//     ) {\n//       setIsAnswerCorrect(true);\n//     } else {\n//       setIsAnswerCorrect(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>{currentQuestion.question}</h2>\n//       <input type=\"text\" value={input1} onChange={handleInput1Change} />\n//       <input type=\"text\" value={input2} onChange={handleInput2Change} />\n//       <button onClick={checkAnswer}>Check Answer</button>\n//       {isAnswerCorrect && <p>Correct!</p>}\n//       {!isAnswerCorrect && (\n//         <p>Incorrect. Please try again or move to the next question.</p>\n//       )}\n//       <button onClick={handleNextQuestion}>Next Question</button>\n//     </div>\n//   );\n// }\n\n// import React, { useState } from 'react';\n\n// function Quiz() {\n//   const questions = [\n//     { question: 'Question 1', id: 1, correctInput1: 'Correct 1', correctInput2: 'Correct 2' },\n//     { question: 'Question 2', id: 2, correctInput1: 'Answer 1', correctInput2: 'Answer 2' },\n//     // Add more questions as needed\n//   ];\n\n//   const [inputs, setInputs] = useState(\n//     questions.map((question) => ({\n//       id: question.id,\n//       input1: '',\n//       input2: '',\n//       isAnswerCorrect: false,\n//     }))\n//   );\n\n//   const handleInputChange = (e, questionId) => {\n//     const { name, value } = e.target;\n//     setInputs((prevInputs) =>\n//       prevInputs.map((input) =>\n//         input.id === questionId ? { ...input, [name]: value } : input\n//       )\n//     );\n//   };\n\n//   const checkAnswer = (questionId) => {\n//     const question = questions.find((q) => q.id === questionId);\n//     const input = inputs.find((input) => input.id === questionId);\n\n//     if (\n//       input.input1 === question.correctInput1 &&\n//       input.input2 === question.correctInput2\n//     ) {\n//       setInputs((prevInputs) =>\n//         prevInputs.map((input) =>\n//           input.id === questionId ? { ...input, isAnswerCorrect: true } : input\n//         )\n//       );\n//     } else {\n//       setInputs((prevInputs) =>\n//         prevInputs.map((input) =>\n//           input.id === questionId ? { ...input, isAnswerCorrect: false } : input\n//         )\n//       );\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {questions.map((question) => {\n//         const input = inputs.find((input) => input.id === question.id);\n\n//         return (\n//           <div key={question.id} className='flex flex-col gap-4'>\n//             <h2>{question.question}</h2>\n//             <input\n//               className='bg-black text-white'\n//               type=\"text\"\n//               name=\"input1\"\n//               value={input.input1}\n//               onChange={(e) => handleInputChange(e, question.id)}\n//             />\n//             <input\n//             className='bg-black text-white'\n//               type=\"text\"\n//               name=\"input2\"\n//               value={input.input2}\n//               onChange={(e) => handleInputChange(e, question.id)}\n//             />\n//             <button onClick={() => checkAnswer(question.id)}>Check Answer</button>\n//             {input.isAnswerCorrect && <p>Correct!</p>}\n//             {!input.isAnswerCorrect && (\n//               <p>Incorrect. Please try again.</p>\n//             )}\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// }\n\n// export default Quiz;\n\n// import React, { useState } from \"react\";\n\n// const Quiz = () => {\n//   // const [quizData, setQuizData] = useState(QuizSample);\n//   const [answers, setAnswers] = useState([]);\n\n//   const handleInputChange = (e, questionId) => {\n//     const { name, value } = e.target;\n//     setAnswers((prevAnswers) => {\n//       const updatedAnswers = [...prevAnswers];\n//       const answerIndex = updatedAnswers.findIndex(\n//         (answer) => answer.questionId === questionId\n//       );\n//       if (answerIndex !== -1) {\n//         updatedAnswers[answerIndex][name] = value;\n//       } else {\n//         updatedAnswers.push({ questionId, [name]: value });\n//       }\n//       return updatedAnswers;\n//     });\n//   };\n\n//   const handleSelectChange = (e, questionId) => {\n//     const { value } = e.target;\n//     setAnswers((prevAnswers) => {\n//       const updatedAnswers = [...prevAnswers];\n//       const answerIndex = updatedAnswers.findIndex(\n//         (answer) => answer.questionId === questionId\n//       );\n//       if (answerIndex !== -1) {\n//         updatedAnswers[answerIndex].selectedChoice = value;\n//       } else {\n//         updatedAnswers.push({ questionId, selectedChoice: value });\n//       }\n//       return updatedAnswers;\n//     });\n//   };\n\n//   const handleSubmit = () => {\n//     console.log(\"Submitted answers:\", answers);\n//     // Add your logic for handling the submitted answers\n//   };\n\n//   const renderQuestion = (question) => {\n//     switch (question.type_Quiz) {\n//       case \"key\":\n//         return (\n//           <div key={question.id}>\n//             <p>{question.title}</p>\n//             <div className=\"flex flex-col\">\n//               {question.keyEdit\n//                 .replace(/%i%/g, question.correctInput)\n//                 .replace(/%i1%/g, question.correctInput1)\n//                 .replace(/%i2%/g, question.correctInput2)}\n//             </div>\n//             <input\n//               type=\"text\"\n//               name=\"input\"\n//               value={getAnswer(question.id, \"input\") || \"\"}\n//               onChange={(e) => handleInputChange(e, question.id)}\n//             />\n//           </div>\n//         );\n//       case \"select\":\n//         return (\n//           <div key={question.id}>\n//             <p>{question.title}</p>\n//             <select\n//               name=\"selectedChoice\"\n//               value={getAnswer(question.id, \"selectedChoice\") || \"\"}\n//               onChange={(e) => handleSelectChange(e, question.id)}\n//             >\n//               <option value=\"\">Select an option</option>\n//               {question.QuizChoice.map((choice, index) => (\n//                 <option key={index} value={index}>\n//                   {choice}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n//         );\n//       default:\n//         return null;\n//     }\n//   };\n\n//   const getAnswer = (questionId, key) => {\n//     const answer = answers.find((answer) => answer.questionId === questionId);\n//     return answer ? answer[key] : null;\n//   };\n\n//   return (\n//     <div>\n//       <h1>Quiz</h1>\n//       {quizData.map((question) => renderQuestion(question))}\n//       <button onClick={handleSubmit}>Submit</button>\n//     </div>\n//   );\n// };\n\n// export default Quiz;\n\n// import React, { useEffect, useState } from \"react\";\n// import QuizSample from \"./quiz\";\n// import Index from \"../layout\";\n\n// export default function Componentquiz() {\n//   const [quizData, setQuizData] = useState(QuizSample);\n//   const [timeOut, setTimeOut] = useState(10 * 60);\n//   const [score, setScore] = useState(null);\n//   const [showResult, setShowResult] = useState(false);\n//   const [inputValues, setInputValues] = useState(\n//     quizData.map((item) => ({\n//       id: item.id,\n//       input_: \"string_0\",\n//       input_1: \"\",\n//       input_2: \"\",\n//       correctAnswer: false,\n//     }))\n//   );\n\n//   useEffect(() => {\n//     const intervalTime = setInterval(() => {\n//       setTimeOut((prevTime) => prevTime - 1);\n//     }, 1000);\n\n//     return () => {\n//       clearInterval(intervalTime);\n//     };\n//   }, []);\n\n//   const min = Math.floor(timeOut / 60);\n//   const seconds = timeOut % 60;\n\n//   const handleChoiceSelect = (questionId, choiceIndex) => {\n//     setQuizData((prevQuestions) => {\n//       return prevQuestions.map((question) => {\n//         if (question.id === questionId) {\n//           return {\n//             ...question,\n//             activeChoice: choiceIndex,\n//           };\n//         }\n//         return question;\n//       });\n//     });\n//   };\n\n//   const handleSubmit = () => {\n//     let newscore = 0;\n//     quizData.forEach((prev) => {\n//       if (\n//         prev.activeChoice === prev.correctchoice &&\n//         prev.type_Quiz === \"select\"\n//       ) {\n//         newscore++;\n//       }\n//     });\n//     setScore(newscore);\n//     setShowResult(!showResult);\n//     console.log(\"log submit\", inputValues[0]?.input_);\n//   };\n\n//   useEffect(() => {\n//     console.log(\"check input --->\", inputValues[0].input_);\n//   }, [inputValues]);\n\n//   return (\n//     <div className=\"flex flex-col gap-[24px] items-center\">\n//       <Index min={min} seconds={seconds}>\n//         {quizData.map((item, ind) => {\n//           const newKeyEdit = item.keyEdit.replace(\n//             /%i%|%i1%|%i2%/gi,\n//             (match) => {\n//               if (match === \"%i%\") {\n//                 return (\n//                   <input\n//                     key={item.id}\n//                     type=\"text\"\n//                     value={inputValues[ind].input_}\n//                     name=\"input_\"\n//                     onChange={(e) => {\n//                       const updateValues = [...inputValues];\n//                       updateValues[ind].input_ = e.target.value;\n//                       setInputValues(updateValues);\n//                     }}\n//                   />\n//                 );\n//               } else if (match === \"%i1%\") {\n//                 return (\n//                   <input\n//                     key={item.id}\n//                     type=\"text\"\n//                     value={inputValues[ind].input_1}\n//                     name=\"input_1\"\n//                     onChange={(e) => {\n//                       const updateValues = [...inputValues];\n//                       updateValues[ind].input_1 = e.target.value;\n//                       setInputValues(updateValues);\n//                     }}\n//                   />\n//                 );\n//               } else if (match === \"%i2%\") {\n//                 return (\n//                   <input\n//                     key={item.id}\n//                     type=\"text\"\n//                     value={inputValues[ind].input_2}\n//                     name=\"input_2\"\n//                     onChange={(e) => {\n//                       const updateValues = [...inputValues];\n//                       updateValues[ind].input_2 = e.target.value;\n//                       setInputValues(updateValues);\n//                     }}\n//                   />\n//                 );\n//               }\n//               return match;\n//             }\n//           );\n\n//           return (\n//             <div key={item.id}>\n//               <h3>{item.question}</h3>\n//               {item.type_Quiz === \"select\" ? (\n//                 item.QuizChoice.map((choice, index) => (\n//                   <div key={index}>\n//                     <label>\n//                       <input\n//                         type=\"radio\"\n//                         checked={item.activeChoice === index}\n//                         onChange={() => handleChoiceSelect(item.id, index)}\n//                       />\n//                       {choice}\n//                     </label>\n//                   </div>\n//                 ))\n//               ) : (\n//                 <div>{newKeyEdit}</div>\n//               )}\n//             </div>\n//           );\n//         })}\n//       </Index>\n//       <button onClick={handleSubmit}>Submit</button>\n//       {showResult && (\n//         <div>\n//           <h2>Your Score: {score}</h2>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n"],"mappings":"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EzD,YAAa;QAAA0B,QAAA,EACvB;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA1D,EAAA,CA7pBwBD,aAAa;AAAAsF,EAAA,GAAbtF,aAAa;AAAA,IAAAsF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}